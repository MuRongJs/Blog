{"data":{"content":{"edges":[{"node":{"id":"b52682f1-d981-59f3-9c90-8786cee40261","html":"<h1 id=\"1、概述\"><a href=\"#1%E3%80%81%E6%A6%82%E8%BF%B0\" aria-label=\"1、概述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1、概述</h1>\n<p>1、Symbol是javascript语言中的第七种数据类型。</p>\n<p>2、Symbol值是Symbol函数生成的，这样对象除了可以用字符串声明属性，还可以用新出的Symbol类型声明属性。这样就会独一无二，不会与其他属性名产生冲突。</p>\n<p>3、Symbol函数前不能使用new命令，否者会报错。这是因为生成的Symbol是一个原始类型的值，不是对象，更像字符串类型的数据类型。</p>\n<p>4、Symbol可以接受一个字符串作为参数，表示对Symbol实例的描述。参数只接受对Symbol值的描述，相同参数产生的Symbol实例是不相等的。</p>\n<p>5、Symbol值不能与其他值进行运算，可以转化为boolean值，不能转化为数值。</p>\n<h1 id=\"2、作为属性名的symbol\"><a href=\"#2%E3%80%81%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84symbol\" aria-label=\"2、作为属性名的symbol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2、作为属性名的Symbol</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1、可以防止对象属性名同名。\n2、Symbol 值作为对象属性名时，不能用点运算符。\n3、在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。\n不放在方括号中，该属性就会是一个字符串\n4、Symbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。\n5、该属性还是公开属性，不是私有属性。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"3、实例：消除魔术字符串\"><a href=\"#3%E3%80%81%E5%AE%9E%E4%BE%8B%EF%BC%9A%E6%B6%88%E9%99%A4%E9%AD%94%E6%9C%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\" aria-label=\"3、实例：消除魔术字符串 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3、实例：消除魔术字符串</h1>\n<p>魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的<strong>变量代替</strong>。</p>\n<pre>\nfunction getArea(shape, options) {\n  let area = 0;\n\n  switch (shape) {\n    case 'Triangle': // 魔术字符串\n      area = 5 * options.width * options.height;\n      break;\n    /* ... more code ... */\n  }\n\n  return area;\n}\n\ngetArea('Triangle', { width: 100, height: 100 }); // 魔术字符串\n</pre>\n<p>上面代码中，字符串Triangle就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。</p>\n<pre>\nconst shapeType = {\n  triangle: 'Triangle'\n};\n\nfunction getArea(shape, options) {\n  let area = 0;\n  switch (shape) {\n    case shapeType.triangle:\n      area = 5 * options.width * options.height;\n      break;\n  }\n  return area;\n}\n\ngetArea(shapeType.triangle, { width: 100, height: 100 });\n</pre>\n<p><strong>适合对数据的处理。</strong></p>\n<p>上面代码中，我们把Triangle写成shapeType对象的triangle属性，这样就消除了强耦合。</p>\n<p>如果仔细分析，可以发现<strong>shapeType.triangle等于哪个等于哪个值并不重要</strong>，只要确保不会跟其他shapeType属性的值冲突即可。因此，这里就很适合改用 Symbol 值。</p>\n<pre>\nconst shapeType = {\n  triangle: Symbol()\n};\n</pre>\n<p><strong>这种方式适合，公共对象、函数调用。不适合对数据的处理。</strong></p>\n<h1 id=\"4、属性名的遍历\"><a href=\"#4%E3%80%81%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84%E9%81%8D%E5%8E%86\" aria-label=\"4、属性名的遍历 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4、属性名的遍历</h1>\n<p>1、Symbol作为属性名，该属性不会出现在for...in,for...of循环中，也不会被不会被Object.keys()、Object.getOwnPropertpertyNames()、JSON.stringify()返回。</p>\n<p>2、可以通过以通过Object.getOwnPropertpertySymbols方法，获取指定对象的Symbol属性名。返回包含所有Symbol成员属性的数组。</p>\n<p>3、当需要返回所有类型的键名时，可以通过以通过Reflect.ownKeys()得到()得到。</p>\n<p>4、也可以用Symbol值在对象中定义一些非私有，但是希望只用于内部的方法。</p>\n<h1 id=\"5、symbolforsymbolkeyfor\"><a href=\"#5%E3%80%81symbolforsymbolkeyfor\" aria-label=\"5、symbolforsymbolkeyfor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5、Symbol.for(),Symbol.keyFor()</h1>\n<p>1、\n1、Symbole.for()方法()方法会接受一个字符串作为参数，然后搜索有没有以此参数作为名称的Symbol值。如果有返回这个Symbol值，如果没有先新建并返回以该字符串为名词的Symbol值。</p>\n<p>2、\n2、Symbole.for()和S()和Symbol()区别，前者会被登记在全局，后者不会。前者会在创建的时候检查key是否已经存在，不存在才会新建这个值。后者没有登记机制，所以每次调用都会返回一个新值。</p>\n<p>3、\n3、Symbol.keyFor()方法()方法会返回一个<strong>已登记的Symbol类型值的key</strong>。</p>\n<h1 id=\"6、实例模块的singleton模式\"><a href=\"#6%E3%80%81%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E7%9A%84singleton%E6%A8%A1%E5%BC%8F\" aria-label=\"6、实例模块的singleton模式 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://es6.ruanyifeng.com/#docs/symbol#%E5%AE%9E%E4%BE%8B%EF%BC%9A%E6%A8%A1%E5%9D%97%E7%9A%84-Singleton-%E6%A8%A1%E5%BC%8F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">6、实例:模块的Singleton模式</a></h1>\n<p>Singleton模式指的是调用一个累,任何时候都返回同一个实例。</p>\n<h1 id=\"7、内置的symbol值\"><a href=\"#7%E3%80%81%E5%86%85%E7%BD%AE%E7%9A%84symbol%E5%80%BC\" aria-label=\"7、内置的symbol值 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7、内置的Symbol值</h1>\n<h4 id=\"symbolhasinstance\"><a href=\"#symbolhasinstance\" aria-label=\"symbolhasinstance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.hasInstance</h4>\n<p>对象的对象的Symbol.hasInstance属性ce属性指向内部的一个方法，用来判断是否是该对象的实例。\n<strong>foo instanceof Foo 相当于 Foo[Symbol.hasInstance](foo)</strong> </p>\n<h4 id=\"symbolisconcatspreapreadable\"><a href=\"#symbolisconcatspreapreadable\" aria-label=\"symbolisconcatspreapreadable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.isConcatSpreapreadable</h4>\n<p>对象的对象的Symbol.isConcatSpreapreadable属性是个布尔值，表示为被用于被用于Array.prototype.concat()时，是否可以展开。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1.数组默认是展开的，Symbol.isConcatSpreapreadable属性为undefined；\n2.类似数组的对象默认是不展开的，只有Symbol.isConcatSpreapreadable为true时是展开的。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>。</p>\n<p>Symbol.isConcatSpreapreadable也可以定义在类里面。</p>\n<h4 id=\"symbolspecies\"><a href=\"#symbolspecies\" aria-label=\"symbolspecies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.species</h4>\n<p>对象的对象的Symbol.species属性，指向一个构造函数。创建衍生对象的时，会使用该属性。</p>\n<p>。</p>\n<p>Symbol.species的作用在的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。</p>","excerpt":"1、概述1、Symbol是javascript语言中的第七种数据类型。2、Symbol值是Symbol函数生成的，这样对象除了可以用字符串声明属性，还可以用新出的Symbol类型声明属性。这样就会独一无二，不会与其他属性名产生冲突。3、Symbol函数前不能使用new…","fields":{"slug":"/blog/es6/Symbol"},"frontmatter":{"id":"https://MuRongJs.github.io/blog/es6/Symbol","title":"es6-Symbol","slug":"/blog/es6/Symbol","date":"2018/10/22 22:34:48","headerImage":""}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b52682f1-d981-59f3-9c90-8786cee40261","index":20}}