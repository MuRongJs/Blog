{"data":{"content":{"edges":[{"node":{"id":"d0063cea-6966-5521-a285-aa0361210ea6","html":"<h1 id=\"1-promise-的含义\"><a href=\"#1-promise-%E7%9A%84%E5%90%AB%E4%B9%89\" aria-label=\"1 promise 的含义 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Promise 的含义</h1>\n<p>Promise是异步编程的一种解决方案，Promise提供统一的API，使异步事件变得可控。</p>\n<p>Promise对象有两个特点：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1.Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）、rejected（已失败）；异步操作只有一种状态。\n2.Promise状态一旦改变，就不会再改变。Promise状态有两种改变：（1）pending到fulfilled；（2）pending到rejected。只要有这两种改变，状态就会凝固（resolved“已定型”），这时候你再向Promise对象添加回调函数，会立即执行，这与事件（event）完全不同。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h1 id=\"2-基本用法\"><a href=\"#2-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" aria-label=\"2 基本用法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 基本用法</h1>\n<p>Promise是一个构造函数，能创建一个Promise实例，创建Promise实例的时候接受一个函数为参数，该函数有两个参数：（resolve、rejected为javascript引擎自带的）。这两个参数分别的作用为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">（1）resolve是将Promise对象状态由pending转为fulfilled;\n (2)rejected是将Promise对象状态由pending转为rejected。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<pre>\n//创建一个Promise实例\nlet asyncFun = new Promise(function(resovle, reject){\n    if(){//成功\n        resovle(val);\n    }else{//失败\n        rejected(err);\n    }\n})\n//Promise实例两种状态下then方法的处理\nasyncFun.then(function(val){\n    //当前Promise为fulfilled时当回调函数，可以取resovle传过来的参数。\n    \n},function(err){\n    //当前Promise为rejected时当回调函数，可以取rejected传过来的参数\n    \n})\n</pre>\n<p>Promise实例生成以后，用then方法可以指定resolve和rejected两种状态的回调函数，then方法接受两个回调函数参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">（1）第一个回调函数参数是resolve状态的回调函数；\n（2）第二个回调函数参数是rejected状态的回调函数；</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>当Promise实例中当resolve函数中参数是别的Promise实例时，then方法的对象就是参数的实例。rejected无。</p>\n<pre>\nconst p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nconst p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2.then(result => console.log(result),err=> console.log(err))\n</pre>\n<p><strong>then方法是当前同步程序执行完后执行的。比setTimeout(function(){},0)还要提前执行</strong></p>\n<h1 id=\"3-promiseprototypethen\"><a href=\"#3-promiseprototypethen\" aria-label=\"3 promiseprototypethen permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Promise.prototype.then()</h1>\n<p>then方法主要是接受两个回调函数（已成功、已失败），当Promise对象状态改变的时候进行来调用。它可以返回一个新的Promise对象，这样可以链式写法，then后面还有then...</p>\n<h1 id=\"4-promiseprototypecatch\"><a href=\"#4-promiseprototypecatch\" aria-label=\"4 promiseprototypecatch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://es6.ruanyifeng.com/#docs/promise#Promise-prototype-catch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">4. Promise.prototype.catch()</a></h1>\n<p>Promise.prototype.catch()是 .then(null, rejected) 的别名。</p>\n<p>在需要设置rejected回调函数的时候，最好以Promise.prototype.catch()方法。</p>\n<h1 id=\"5-promiseprototypefinally\"><a href=\"#5-promiseprototypefinally\" aria-label=\"5 promiseprototypefinally permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Promise.prototype.finally()</h1>\n<p>Promise.prototype.finally()方法是在Promise对象无论什么状态，最后都执行的。finally是then方法都特例。</p>\n<pre>\npromise\n.finally(function(){\n//..执行\n\n})\n\n//等同于(finally的特例)\npromise\n.then(\n    result => {\n        return result;\n    },\n    err => {\n        return err;\n    }\n)\n\n//finally的实现\nPromise.prototype.finally = function(callback){\n    let p = this.construct;\n    return this.then(\n        val => p.resovle(callback()).then(()=> return val;),\n        err => p.resovle(callback()).then(()=> {throw err})\n    )\n}\n</pre>\n<p>finally总会返回原来的值。</p>\n<h1 id=\"6-promiseprototypeall\"><a href=\"#6-promiseprototypeall\" aria-label=\"6 promiseprototypeall permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://es6.ruanyifeng.com/#docs/promise#Promise-all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">6. Promise.prototype.all()</a></h1>\n<p>Promise.all方法接受具有Iterator接口的对象作为参数，且每个成员都是Promise实例。Promise.all方法将包装成新的Promise实例，参数对新实例的影响：\n<br>\n1.参数中的每个Promise对象，都为fulfilled，新实例的状态才为fulfilled。每个参数中的Promise返回值会以数组的形式返回给新实例。\n2.参数中的某个Promise对象，为rejected，新实例的状态为rejected，并把rejected返回值返回给Promise。\n3.参数中的Promise对象设置来catch方法时，不会调用新实例中的catch方法。</p>\n<h1 id=\"7-promiserace\"><a href=\"#7-promiserace\" aria-label=\"7 promiserace permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Promise.race()</h1>\n<p>Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<p>参数对象中某个参数不是Promise实例时，会先用Promise.resolve将参数转为Promise实例。</p>\n<h1 id=\"8-promiseresolve\"><a href=\"#8-promiseresolve\" aria-label=\"8 promiseresolve permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Promise.resolve()</h1>\n<p>Promise.resolve函数是将参数转换为Promise对象。具体的转换有以下四种：</p>\n<h3 id=\"（1）-参数为一个promise实例\"><a href=\"#%EF%BC%881%EF%BC%89-%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%80%E4%B8%AApromise%E5%AE%9E%E4%BE%8B\" aria-label=\"（1） 参数为一个promise实例 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>（1） 参数为一个Promise实例</h3>\n<p>resolve函数会不进行修改，原封不动的返回这个实例。</p>\n<h3 id=\"（2）-参数是一个thenable对象\"><a href=\"#%EF%BC%882%EF%BC%89-%E5%8F%82%E6%95%B0%E6%98%AF%E4%B8%80%E4%B8%AAthenable%E5%AF%B9%E8%B1%A1\" aria-label=\"（2） 参数是一个thenable对象 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>（2） 参数是一个thenable对象</h3>\n<p>thenable对象指的是具有then方法的对象，比如下面这个对象。</p>\n<pre>\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n</pre>\n<p>Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。</p>\n<h3 id=\"3-参数不是具有then方法的对象，或根本就不是对象\"><a href=\"#3-%E5%8F%82%E6%95%B0%E4%B8%8D%E6%98%AF%E5%85%B7%E6%9C%89then%E6%96%B9%E6%B3%95%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%88%96%E6%A0%B9%E6%9C%AC%E5%B0%B1%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1\" aria-label=\"3 参数不是具有then方法的对象，或根本就不是对象 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 参数不是具有then方法的对象，或根本就不是对象</h3>\n<p>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。</p>\n<h3 id=\"4-不带有任何参数\"><a href=\"#4-%E4%B8%8D%E5%B8%A6%E6%9C%89%E4%BB%BB%E4%BD%95%E5%8F%82%E6%95%B0\" aria-label=\"4 不带有任何参数 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) 不带有任何参数</h3>\n<p>Promise.resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。</p>\n<p><strong>setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行</strong></p>\n<h1 id=\"9-promisereject\"><a href=\"#9-promisereject\" aria-label=\"9 promisereject permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Promise.reject()</h1>\n<p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p>\n<p>注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数</p>","excerpt":"1. Promise 的含义Promise是异步编程的一种解决方案，Promise提供统一的API，使异步事件变得可控。Promise对象有两个特点：2. 基本用法Promise是一个构造函数，能创建一个Promise实例，创建Promise…","fields":{"slug":"/javascript/es6/Promise"},"frontmatter":{"id":"https://MuRongJs.github.io/javascript/es6/Promise","title":"es6-Promise","slug":"/javascript/es6/Promise","date":"2018/11/10 22:34:48","headerImage":""}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d0063cea-6966-5521-a285-aa0361210ea6","index":16}}