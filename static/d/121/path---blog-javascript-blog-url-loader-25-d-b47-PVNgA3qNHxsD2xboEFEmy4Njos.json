{"data":{"content":{"edges":[{"node":{"id":"117dca4e-cb17-54c3-831c-78feb62d2d36","html":"<p><a href=\"http://www.dailichun.com/2018/03/12/whenyouenteraurl.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原文链接</a></p>\n<h1 id=\"大纲\"><a href=\"#%E5%A4%A7%E7%BA%B2\" aria-label=\"大纲 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>大纲</h1>\n<ul>\n<li>\n<p>对知识体系进行一次预评级</p>\n</li>\n<li>\n<p>为什么说知识体系如此重要？</p>\n</li>\n<li>\n<p>梳理主干流程</p>\n</li>\n<li>\n<p>从浏览器接收url到开启网络请求线程</p>\n<ul>\n<li>多进程的浏览器</li>\n<li>多线程的浏览器内核</li>\n<li>解析URL</li>\n<li>网络请求都是单独的线程</li>\n<li>更多</li>\n</ul>\n</li>\n<li>\n<p>开启网络线程到发出一个完整的http请求</p>\n<ul>\n<li>DNS查询到ip地址</li>\n<li>tcp/ip请求</li>\n<li>五层因特网协议栈</li>\n</ul>\n</li>\n<li>\n<p>从服务器接收到请求到对应后台接受到请求</p>\n<ul>\n<li>负载均衡</li>\n<li>后台的处理</li>\n</ul>\n</li>\n<li>\n<p>后台和前台的http交互</p>\n<ul>\n<li>http报文结构</li>\n<li>cookie以及优化</li>\n<li>gzip压缩</li>\n<li>长连接和短连接</li>\n<li>http2.0</li>\n<li>http</li>\n</ul>\n</li>\n<li>\n<p>单独拎出来的缓存问题，http的缓存</p>\n<ul>\n<li>强缓存和弱缓存</li>\n<li>缓存头部简述</li>\n<li>头部的区别</li>\n</ul>\n</li>\n<li>\n<p>解析页面流程</p>\n<ul>\n<li>流程简述</li>\n<li>HTML解析，构建DOM</li>\n<li>生成css规则</li>\n<li>构建渲染树</li>\n<li>渲染</li>\n<li>简单层和复合层</li>\n<li>Chrome中的调试</li>\n<li>资源外链的下载</li>\n<li>loaded和domcontentloaded</li>\n</ul>\n</li>\n<li>\n<p>CSS的可视化格式模型</p>\n<ul>\n<li>包含块(Containing Block)</li>\n<li>控制框(Controlling Box)</li>\n<li>BFC(Block Formatting Context)</li>\n<li>IFC(Inline Formatting Context)</li>\n<li>其它</li>\n</ul>\n</li>\n<li>\n<p>JS引擎解析过程</p>\n<ul>\n<li>JS解释阶段</li>\n<li>JS的预处理阶段</li>\n<li>JS的执行阶段</li>\n<li>回收机制</li>\n</ul>\n</li>\n<li>\n<p>其它</p>\n</li>\n<li>\n<p>总结</p>\n<h1 id=\"为什么说知识体系如此重要\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E5%A6%82%E6%AD%A4%E9%87%8D%E8%A6%81\" aria-label=\"为什么说知识体系如此重要 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么说知识体系如此重要</h1>\n<p>总结：知识体系化后，对一个问题能有浅到深的解答，会更全面，可以不断的往事情的本质挖掘。</p>\n<h2 id=\"例子\"><a href=\"#%E4%BE%8B%E5%AD%90\" aria-label=\"例子 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例子</h2>\n</li>\n<li>\n<p>getComputedStyle</p>\n<ul>\n<li>getComputedStyle返回元素最终计算出的css属性值，可以通过window.getComputedStyle和document.defaultView.getComputedStyle调用。</li>\n<li>可以举出获取元素高度和背景色，来推断出输出css属性值为当前元素计算的值。</li>\n<li>getComputedStyle会引起回流，因为它需要获取祖先节点的一些信息来进行计算，产生回流引起性能问题。offsetXXX，scrollXXX，clientXXX，currentStyle等等都能产生回流问题。</li>\n</ul>\n</li>\n<li>\n<p>visibility: hidden 和 display: none的区别</p>\n<ul>\n<li>前者隐藏占据位置，后者隐藏不占据位置。</li>\n<li>display由于隐藏后不占据位置，所以造成dom树的改变，会引起回流，代价比加大。</li>\n<li>当一个页面某个元素经常需要切换display时如何优化，一般会用复合层优化，或者要求低一点用absolute让其脱离普通文档流也行。然后可以将话题引到普通文档流，absolute文档流，复合图层的区别，</li>\n<li>\n<p>再进一步可以描述下浏览器渲染原理以及复合图层和普通图层的绘制区别（复合图层单独分配资源，独立绘制，性能提升，但是不能过多，还有隐式合成等等）</p>\n<h2 id=\"前端向知识的重点\"><a href=\"#%E5%89%8D%E7%AB%AF%E5%90%91%E7%9F%A5%E8%AF%86%E7%9A%84%E9%87%8D%E7%82%B9\" aria-label=\"前端向知识的重点 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端向知识的重点</h2>\n</li>\n</ul>\n</li>\n<li>\n<p>核心/基础知识：浏览器模型、渲染原理、JS解析过程、JS运行机制</p>\n</li>\n<li>\n<p>重点知识，往往每一块都是一个知识点，而且这些知识点都很重要，譬如http相关，web安全相关，跨域处理等</p>\n</li>\n<li>\n<p>拓展知识，这一块可能更多的是了解，稍微实践过，但是认识上可能没有上面那么深刻，譬如五层因特网协议栈，hybrid模式，移动原生开发，后台相关等等（当然，在不同领域，可能有某些知识就上升到重点知识层次了，譬如hybrid开发时，懂原生开发是很重要的）</p>\n<h1 id=\"梳理主干流程\"><a href=\"#%E6%A2%B3%E7%90%86%E4%B8%BB%E5%B9%B2%E6%B5%81%E7%A8%8B\" aria-label=\"梳理主干流程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>梳理主干流程</h1>\n<p>对于这道题，我们先梳理问题的主干，再填充细节。</p>\n<p>1.从浏览器接受url到开启网络请求线程（这部分可以展开浏览器的机制以及进程和线程之间的关系）\n2.开启网络线程到发出一个完整到http请求（这部分有DNS查询、tcp/ip请求、五层因特网协议栈等知识）\n3.从服务器接受到请求到对应后台接受到请求（这部分有负载均衡、安全拦截、后台内部处理等）\n4.后台和前台到http交互（这部分包括http头部、响应码、报文结构、cookice等知识）\n5.单独拎出来到缓存问题，http到缓存（http缓存头部、etag、catch-control等）\n6.浏览器收到http数据包的解析流程（解析html-词法分析生成DOM树、解析css生成css规则树、合并成rander树、然后layout&#x26;&#x26;painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）\n7.CSS的可视化格式模型（元素等渲染规则，如：包含块、控制框、BFC、IFC等概念）;\n8.JS引擎解析过程（JS解释阶段，预处理阶段,JS执行过程-JS生成上下文、VO、作用域链、回收机制等）\n9.其它（拓展不同的知识模块，跨域问题、web安全、hybrid模式等）</p>\n<h1 id=\"浏览器接受url到开启网络请求线程\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A5%E5%8F%97url%E5%88%B0%E5%BC%80%E5%90%AF%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%BA%BF%E7%A8%8B\" aria-label=\"浏览器接受url到开启网络请求线程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>浏览器接受URL到开启网络请求线程</h1>\n<p>内容:浏览器进程/线程模型,JS的运行机制。</p>\n<h2 id=\"多进程浏览器模型\"><a href=\"#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B\" aria-label=\"多进程浏览器模型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多进程浏览器模型</h2>\n<p>进程包括：浏览器主控进程、插件进程、GPU、Tab页进程</p>\n</li>\n<li>\n<p>browser进程：浏览器的主进程（负责协调、主控），只有一个</p>\n</li>\n<li>\n<p>第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建</p>\n</li>\n<li>\n<p>GPU进程：最多一个，用于3D绘制</p>\n</li>\n<li>\n<p>浏览器渲染进程（内核）：默认每个Tab页一个进程，互不影响，主要控制页面渲染，脚本执行，事件处理（有时候会优化，如多个空白tab会合并成一个进程）</p>\n<h2 id=\"多线程等的浏览器内核\"><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AD%89%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8\" aria-label=\"多线程等的浏览器内核 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多线程等的浏览器内核</h2>\n<p>每个tab页可以看作浏览器内核进程，这个进程是多线程的，有几大类子线程</p>\n</li>\n<li>\n<p>GUI线程</p>\n</li>\n<li>\n<p>JS引擎线程</p>\n</li>\n<li>\n<p>事件触发线程</p>\n</li>\n<li>\n<p>定时器线程</p>\n</li>\n<li>\n<p>网络请求线程\n由此可以看出JS引擎线程是浏览器内核进程中的一个线程，这也就知道为什么JS引擎是单线程的了。</p>\n<h2 id=\"解析url\"><a href=\"#%E8%A7%A3%E6%9E%90url\" aria-label=\"解析url permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析URL</h2>\n<p>URL包含以下几大部分</p>\n</li>\n<li>\n<p>protocol(协议头)，比如说http、ftp、file</p>\n</li>\n<li>\n<p>host(主机域名或IP地址)</p>\n</li>\n<li>\n<p>port(端口号)</p>\n</li>\n<li>\n<p>path(目录路径)</p>\n</li>\n<li>\n<p>query(查询参数)</p>\n</li>\n<li>\n<p>fragment(即#后的hash值，一般用来定位某个位置)</p>\n<h2 id=\"网络请求都是单独的线程\"><a href=\"#%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E9%83%BD%E6%98%AF%E5%8D%95%E7%8B%AC%E7%9A%84%E7%BA%BF%E7%A8%8B\" aria-label=\"网络请求都是单独的线程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网络请求都是单独的线程</h2>\n<p>每次输入URL进行解析后，开启网络线程-进行网络请求，都会开启一个单独的线程，前往请求资源。</p>\n</li>\n</ul>\n<p><strong>补充浏览器多进程到JS单线程，JS运行机制</strong></p>\n<h1 id=\"开启网络线程到发出一个完整的http请求\"><a href=\"#%E5%BC%80%E5%90%AF%E7%BD%91%E7%BB%9C%E7%BA%BF%E7%A8%8B%E5%88%B0%E5%8F%91%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84http%E8%AF%B7%E6%B1%82\" aria-label=\"开启网络线程到发出一个完整的http请求 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开启网络线程到发出一个完整的http请求</h1>\n<p>主要内容为：DNS查询、TCP/IP请求构建、五层因特网协议栈等。</p>\n<h2 id=\"dns查询得到ip\"><a href=\"#dns%E6%9F%A5%E8%AF%A2%E5%BE%97%E5%88%B0ip\" aria-label=\"dns查询得到ip permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS查询得到IP</h2>\n<p>当输入域名时，需要进行DNS解析，具体解析过程如下：\n<br>\n1、首先查询本地浏览器的缓存，是否存在。\n2、查询本地缓存，是否存在。\n3、查询host，是否存在。\n3、再向DNS服务器进行域名查询，查询到IP，（在这期间会经过路由，路由也会有缓存；也会进过CDN调度器，CDN也会有存储功能）</p>\n<p>进行DNS解析会很耗费时间，可以进行dns-prefetch优化。</p>\n<p><strong>补充dns-prefetch优化</strong></p>\n<h2 id=\"tcpip请求\"><a href=\"#tcpip%E8%AF%B7%E6%B1%82\" aria-label=\"tcpip请求 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tcp/ip请求</h2>\n<p>http协议本质是tcp/ip，http协议进行3次握手建立连接，4次挥手断开连接，在建立连接后tcp将http长报文划分为短报文，进行可靠传输。</p>\n<p><strong>三次握手、四次挥手补充</strong></p>\n<ul>\n<li>\n<p>tcp/ip的并发限制:浏览器对同一域名并发的tcp连接是有限的（2-10个不等）,http1.0往往一个资源下载需要对应一个tcp/ip请求。</p>\n</li>\n<li>\n<p>get和post的区别:get/post本质都是tcp/ip，除了在http应用层上，tcp/ip传输层上也有区别。get产生一个tcp数据包，post两个。</p>\n<ul>\n<li>get请求时，浏览器会将header和data一起发送出去，服务器响应200（返回数据）</li>\n<li>\n<p>post请求时，浏览器会先发送header，服务器响应100continue，浏览器再发送data，服务器响应200（返回数据）</p>\n<h1 id=\"五层因特网协议栈\"><a href=\"#%E4%BA%94%E5%B1%82%E5%9B%A0%E7%89%B9%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%A0%88\" aria-label=\"五层因特网协议栈 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>五层因特网协议栈</h1>\n<p>从应用层http发送请求，到传输层通过三次握手建立tcp/ip连接，再到网络层的ip寻址，再到数据链路层封装成帧，再到物理层利用物理介质传输；服务端的接受顺序是反过来的步骤。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>应用层（dns、http）DNS解析成ip发送http请求。</p>\n</li>\n<li>\n<p>传输层（tcp、udp）建立tcp连接（三次握手）</p>\n</li>\n<li>\n<p>网络层（ip、arp）ip寻址</p>\n</li>\n<li>\n<p>数据链路层（ppp）封装成帧</p>\n</li>\n<li>\n<p>物理层（利用物理介质传输比特流）物理传输（通过双绞线、电磁波、光纤）\n相对与五层因特网协议，完整的OSI是七层框架：物理层、数据链路层、网络层、会话层、表示层、传输层、应用层</p>\n</li>\n<li>\n<p>表示层:处理两个通信系统中交换信息的表示方式，包括数据格式交换，数据的加密和解密，数据压缩和终端类型转换等。</p>\n</li>\n<li>\n<p>会话层:管理不同用户和进程之间的对话，如控制登录和注销过程。</p>\n</li>\n</ul>\n<p><strong>计算机网络补充</strong></p>\n<h1 id=\"从服务器接受的请求到对应后台接受到请求\"><a href=\"#%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%8F%97%E7%9A%84%E8%AF%B7%E6%B1%82%E5%88%B0%E5%AF%B9%E5%BA%94%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%97%E5%88%B0%E8%AF%B7%E6%B1%82\" aria-label=\"从服务器接受的请求到对应后台接受到请求 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>从服务器接受的请求到对应后台接受到请求</h1>\n<p>简介服务器接收到请求的处理</p>\n<h2 id=\"负载均衡\"><a href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\" aria-label=\"负载均衡 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>负载均衡</h2>\n<p>用户发起的请求都指向调度服务器（反向代理服务器，比如安装了nginx控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行，然后调度器等待实际服务器的HTTP响应，并将它反馈给用户</p>\n<h2 id=\"后台的处理\"><a href=\"#%E5%90%8E%E5%8F%B0%E7%9A%84%E5%A4%84%E7%90%86\" aria-label=\"后台的处理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后台的处理</h2>\n<p>后台代码一般会部署到容器中</p>\n<ul>\n<li>容器接受到请求（如tomcat容器）</li>\n<li>容器中的后台代码就收到请求（如java程序）</li>\n<li>后台代码处理完请求后，返回响应结果\n具体概括:</li>\n<li>后台一般有统一验证，如安全拦截，跨域验证；如果这一步不符合规则，就直接返回对应的http报文（如拒绝请求等）</li>\n<li>通过验证后，再进行后台代码，程序接受到请求，然后执行（比如查数据库、大量计算等）</li>\n<li>等程序执行完，会返回一个http响应包（一般这一步也会经过多层封装）</li>\n<li>\n<p>将http响应包通过因特网发送到前端，完成交互</p>\n<h1 id=\"后台和前台的http交互\"><a href=\"#%E5%90%8E%E5%8F%B0%E5%92%8C%E5%89%8D%E5%8F%B0%E7%9A%84http%E4%BA%A4%E4%BA%92\" aria-label=\"后台和前台的http交互 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后台和前台的http交互</h1>\n<h2 id=\"http报文结构\"><a href=\"#http%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84\" aria-label=\"http报文结构 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>http报文结构</h2>\n<p>报文一般包括:通用头部、请求头部/响应头部、请求体/响应体</p>\n<h3 id=\"通用头部（general）\"><a href=\"#%E9%80%9A%E7%94%A8%E5%A4%B4%E9%83%A8%EF%BC%88general%EF%BC%89\" aria-label=\"通用头部（general） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通用头部（General）</h3>\n</li>\n<li>Request Url:请求的web服务器地址</li>\n<li>\n<p>Request Method:请求方式（get、post、options、put、head、delete、connect、teace）</p>\n<ul>\n<li>请求方式分两批次:1.0和1.1版本的(HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法,以及几种Additional Request Methods：PUT、DELETE、LINK、UNLINK;HTTP1.1定义了八种请求方法：GET、POST、HEAD、OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。)</li>\n</ul>\n</li>\n<li>\n<p>Status Code:请求的返回状态码</p>\n<ul>\n<li>1xx -- 指示信息，表示请求已接受，继续处理</li>\n<li>2xx -- 成功，表示请求已经被成功接收、理解、接受</li>\n<li>3xx -- 重定向，要完成请求必须进行更进一步的操作</li>\n<li>4xx -- 客户端错误，请求有语法错误或请求无法实现。</li>\n<li>5xx -- 服务端错误，服务端无法实现合理的请求。</li>\n</ul>\n</li>\n<li>\n<p>Remote Address:请求的远程服务器地址（ip地址）</p>\n<h3 id=\"请求头部（request-headers）响应头部（response-headers）\"><a href=\"#%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%EF%BC%88request-headers%EF%BC%89%E5%93%8D%E5%BA%94%E5%A4%B4%E9%83%A8%EF%BC%88response-headers%EF%BC%89\" aria-label=\"请求头部（request headers）响应头部（response headers） permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>请求头部（Request Headers）/响应头部（Response Headers）</h3>\n<p>请求头部部分（Request Headers）</p>\n</li>\n<li>Accept:接受类型，表示浏览器支持的MIME类型（对标服务端返回Content-Type）</li>\n<li>Accept-Encoding:浏览器支持的压缩类型，如gzip，超出类型浏览器不接收。</li>\n<li>Content-Type:客服端发出去实体内容的类型。</li>\n<li>Cache-Control:指请求和响应遵循的缓存机制。</li>\n<li>If-Modified-Since:用来匹配文件是否改动，只能精确在1s之内，http1.0（对标服务端的Last-modified）</li>\n<li>Expires:缓存控制，这个时间内不会发送请求，直接用缓存，以服务端时间为准，http1.0</li>\n<li>Max-age:代表缓存资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1.1</li>\n<li>If-None-Match:用来匹配文件内容是否改变，精确http1.1（对标服务端的ETag）</li>\n<li>Cookie:有cookie并且同域访问时会自动带上。</li>\n<li>Connection:当浏览器和服务端通信时对于长连接如何进行处理，如keep-live</li>\n<li>Host:请求的服务器的URL</li>\n<li>Origin:最初的请求从哪里发起的（只会精确到端口），Origin比Referer更尊重隐私</li>\n<li>Referer:该页面的来源URL(使用所有类型的请求，会精确到详细页面地址，CSRF拦截常用到这个字段)</li>\n<li>User-Agent:用户客户端的一些必要信息，如UA头部等\n响应头部部分（Response Headers）</li>\n<li>Access-Control-Allow-Headers:服务器允许的请求Headers</li>\n<li>Access-Control-Allow-Methods:服务端允许的请求方法</li>\n<li>Access-Control-Allow-Origin:服务端允许的请求Origin头部（譬如*）</li>\n<li>Content-Type:服务端返回实体内容类型</li>\n<li>Date:数据从服务器发送的时间</li>\n<li>Cache-Control:告诉浏览器或其它客户，什么环境可以安全的缓存文档</li>\n<li>Last-Modified:请求资源最后的修改时间</li>\n<li>Expires:在有效缓存期外，不在缓存。</li>\n<li>Max-age:客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效</li>\n<li>ETag:请求变量的实体标签的当前值</li>\n<li>Set-Cookie:设置和页面关联的cookie，服务端通过这个头部把cookie传给客户端</li>\n<li>Keep-Alive：如果客户端有keep-alive，服务端也会有响应</li>\n<li>\n<p>Server：服务器的一些相关信息</p>\n<h3 id=\"请求实体响应实体\"><a href=\"#%E8%AF%B7%E6%B1%82%E5%AE%9E%E4%BD%93%E5%93%8D%E5%BA%94%E5%AE%9E%E4%BD%93\" aria-label=\"请求实体响应实体 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>请求实体/响应实体</h3>\n<p>http请求，除了头部，还有消息实体。</p>\n</li>\n<li>请求实体中，会将需要的参数放入（如post请求），请求实体可以放入参数的序列化形式（a=1&#x26;b=2），或者表单对象（Form Data对象，上传可以夹杂参数或者文件），等等</li>\n<li>\n<p>响应实体中，json、html字符串等</p>\n<h3 id=\"crlf\"><a href=\"#crlf\" aria-label=\"crlf permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRLF</h3>\n<p>CRLF（Carriage-Return Line-Feed），意思是回车换行，一般作为分隔符存在，请求头和实体消息之间有一个CRLF分隔，响应头部和响应实体之间用一个CRLF分隔。</p>\n<h2 id=\"cookie以及优化\"><a href=\"#cookie%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96\" aria-label=\"cookie以及优化 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cookie以及优化</h2>\n<p>Cookie是浏览器等一种本地存储方式，一般用来客户端和服务端进行通信、校验身份，结合服务端的seesion进行使用。</p>\n</li>\n</ul>\n<p>Cookie的生成:登录时，服务器会生成一个session，session中有登录者的信息、sessionId（相当于登陆者在服务器中的key），服务器在登录页面写入Cookie，浏览器本地就有了Cookie值，以后访问同域名下的页面时，自动带上Cookie，自动校验，在有效期内无需二次登录。</p>\n<ul>\n<li>通过设置httponly可以避免通过js来进行设置</li>\n<li>可以对Cookie进行加密。</li>\n</ul>\n<h3 id=\"cookie优化\"><a href=\"#cookie%E4%BC%98%E5%8C%96\" aria-label=\"cookie优化 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cookie优化</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1、原因:由于A域名下包含所有资源，所以当用户登录拥有Cookie时，浏览器再请求资源时默认会带上Cookie，由于静态资源不需要Cookie。优化方法:将不需要登录的静态资源放到B域名下。\n2、原因:当请求域名过多时，会降低请求速度（域名解析会很耗费时间，移动端带宽低于pc端）。优化方法:使用dns-prefetch（杂居浏览器空闲时进行提前解析）</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"gzip压缩\"><a href=\"#gzip%E5%8E%8B%E7%BC%A9\" aria-label=\"gzip压缩 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gzip压缩</h2>\n<p>gzip在浏览器支持的情况和服务器开启gzip压缩的情况下，可以以gzip进行传输。</p>\n<h2 id=\"长连接和短连接\"><a href=\"#%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5\" aria-label=\"长连接和短连接 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>长连接和短连接</h2>\n<p>在tcp/ip层面的定义:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* 长链接:在tcp/ip连续发送多个数据包期间，tcp/ip保持连接，如果没有数据包发送，需要双方发送检测包进行维持连接，一般需要自己做在线维持（心跳包）。\n* 短连接:通信双方有数据交互时，就建立tcp连接，数据传输完毕后，则断开此tcp连接。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>在http层面的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* http1.0中，默认使用短连接，浏览器每建立一次http请求，就会建立一次连接，任务结束就会中断。\n* http1.1中，默认使用长连接（Connection:keep-alive）,在长连接的情况下，当访问服务器打开页面时浏览器和服务器之间的http的tcp连接不会中断，当再次访问同一服务器时会继续使用这条已经建立的长连接。\n* keep-alive不会永久保持，会在服务器中配置。要服务端和客户端同时支持才有效。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"http20\"><a href=\"#http20\" aria-label=\"http20 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>http2.0</h2>\n<p>http1.0与http2.0</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* http1.0中，每发一次资源请求就要建立一次tcp/ip连接。当资源数量多时，由于tcp/ip并发数有限制，速度就会减慢。\n* http2.0中，一个tcp/ip请求就可以请求多个资源，也就是一次请求若干个资源，分割成更小的帧请求，速度会明显提升。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>当使用http2.0时，很多http1.0的优化方案就无需使用了（打包成精灵图，静态资源多域名拆分等）</p>\n<p>http2.0的特性</p>\n<ul>\n<li>多路复用（一个tcp/ip连接可以请求多个资源）</li>\n<li>首部压缩（http头部压缩，减少体积）</li>\n<li>二进制分帧（在应用层和传输层之间添加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量）</li>\n<li>服务端推送（服务端对客户端的一个请求可以有多个响应，也可以主动通知客户端）</li>\n<li>\n<p>请求优先级（当流被赋予优先级，会基于这个优先级来进行处理，服务器来决定需要多少资源来进行处理该请求）</p>\n<h2 id=\"https\"><a href=\"#https\" aria-label=\"https permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>https</h2>\n<p>https是http的安全版，https和http的区别主要是:在请求前，会建立ssl链接，确保接下来的通信都是加密的，无法被轻易截取分析。网站升级为https需要后台进行支持（后台需要申请证书），https也比http的开销大（因此需要额外建立安全链接以及加密），http2.0配合https为最佳。</p>\n</li>\n</ul>\n<p>SSL/TLS的握手流程，如下（简述）:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1、在建立SSL连接时，浏览器会向服务端发送一个随机数---client random和客户端支持的加密方法，此时时明文\n2、服务端选中一组加密方法和Hash算法，回复一个随机数---Sever random，并将表示自己身份的证书发给浏览器（证书内包含了网站的地址，非对称加密的公钥，证书颁发机构等信息）\n3、浏览器收到服务端的证书后:\n    * 检验证书的合法性（颁发机构是否合法、证书包含的网站是否是和正在访问的一样）\n    * 接收到证书后（不管信任不信任），浏览器会生产新的随机数---premaster secret，证书中的公钥和加密方法加密‘premaster secret’，发送给服务器。\n    * 利用Client random、Sever random和premaster secret通过一定的算法生成的http链接传输的对称加密key-‘session key’\n    * 使用约定好的HASH算法计算握手消息，并使用之前生成的“session key”对消息进行加密，最后将之前生成的所用消息发送给服务器。\n4、服务端收到浏览器的回复\n    * 利用已知的加解密方式与自己的私钥进行解密，获取到‘premaster secret’\n    * 和浏览器相同规则生成`session key`\n    * 使用`session key`解密浏览器发来的握手消息，并验证Hash是否与浏览器发来的一致\n    * 使用`session key`加密一段握手消息，发送给浏览器\n5、 浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>之后所有的https通信数据将由之前浏览器生成的session key并利用对称加密算法进行加密\n<a href=\"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">图解SSL/TLS协议</a></p>\n<h1 id=\"http缓存\"><a href=\"#http%E7%BC%93%E5%AD%98\" aria-label=\"http缓存 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>http缓存</h1>\n<p>http缓存对于交互性能有很大到提升。</p>\n<h2 id=\"强缓存与弱缓存\"><a href=\"#%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%BC%B1%E7%BC%93%E5%AD%98\" aria-label=\"强缓存与弱缓存 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>强缓存与弱缓存</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* 强缓存（200 from cache）时，浏览器判断本地缓存是否过期，未过期直接使用，不需发起http请求。\n* 弱缓存（304 from cache）时，浏览器会服务器发送请求进行判断缓存是否过期，未过期，使用本地缓存。</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>对于强缓存，在未过期时，必须更改资源路径才能发起新的请求。</p>\n<h2 id=\"缓存头部简述\"><a href=\"#%E7%BC%93%E5%AD%98%E5%A4%B4%E9%83%A8%E7%AE%80%E8%BF%B0\" aria-label=\"缓存头部简述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存头部简述</h2>\n<p>强缓存和协议缓存的是通过不同的http头部控制的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* 强缓存: Cache-control/Max-Age (http1.1)、Pragma/Expires http1.0）\n* 协议缓存: If-None-Match/E-tag (http1.1)、If-Modified-Since/Last-Modified (http1.0)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"头部的区分\"><a href=\"#%E5%A4%B4%E9%83%A8%E7%9A%84%E5%8C%BA%E5%88%86\" aria-label=\"头部的区分 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>头部的区分</h2>\n<h1 id=\"解析页面流程\"><a href=\"#%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B\" aria-label=\"解析页面流程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析页面流程</h1>\n<p>在浏览器获取到html后，浏览器进行解析、渲染</p>\n<h2 id=\"流程的简述\"><a href=\"#%E6%B5%81%E7%A8%8B%E7%9A%84%E7%AE%80%E8%BF%B0\" aria-label=\"流程的简述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流程的简述</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1、解析HTML，构建DOM树\n2、解析CSS规则，生成CSS规则树\n3、合并DOM树和CSS规则树，生成rander树\n4、布局render (layout/reflow),负责各个元素的的尺寸、位子的计算\n5、绘制render树 (paint),绘制页面像素信息\n6、浏览器将各层的信息发送给GPU，GPU会将各层合成 (composite),显示在屏幕上</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"html解析，构建dom\"><a href=\"#html%E8%A7%A3%E6%9E%90%EF%BC%8C%E6%9E%84%E5%BB%BAdom\" aria-label=\"html解析，构建dom permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML解析，构建DOM</h2>\n<p>简述流程: Bytes >> characters >> tokens >> nodes >> DOM\n<img src=\"https://dailc.github.io/staticResource/blog/basicKnowledge/whenyouenteraurl/browser_parse_html.png\"></p>\n<ul>\n<li>\n<p>Conversion转换: 将浏览器得到的Bytes内容转换为字符;Bytes >> characters</p>\n</li>\n<li>\n<p>Tokenizing分词: 浏览器会将字符转换为不同的标记 token;characters >> tokens</p>\n</li>\n<li>\n<p>Lexing词法分析: 得到token，将他们转化为对象，这些对象分别定义他们的属性和规则; tokens >> nodes </p>\n</li>\n<li>\n<p>DOM构建; nodes >> DOM</p>\n<h2 id=\"生成css规则\"><a href=\"#%E7%94%9F%E6%88%90css%E8%A7%84%E5%88%99\" aria-label=\"生成css规则 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成CSS规则</h2>\n<p>简述流程: Bytes >> characters >> tokens >> nodes >> CSSOM;这个流程生成了CSS规则树</p>\n<h2 id=\"构建渲染树\"><a href=\"#%E6%9E%84%E5%BB%BA%E6%B8%B2%E6%9F%93%E6%A0%91\" aria-label=\"构建渲染树 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构建渲染树</h2>\n<p>通过DOM树和CSSOM进行构建渲染树，渲染树和DOM树两者不是严格一一对应。</p>\n<h2 id=\"渲染\"><a href=\"#%E6%B8%B2%E6%9F%93\" aria-label=\"渲染 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染</h2>\n<p>1、计算CSS样式\n2、构建render树\n3、布局，主要定位坐标和大小，是否换行，各种position、overflow、z-index属性\n4、绘制，将图像绘制出来\n在这过程中都两个概念，回流（Layout/Reflow）和重绘（Repaint）</p>\n<ul>\n<li>\n<p>回流指的是元素的内容、结构、位置或尺寸发生了改变，需要重新进行计算样式、渲染树</p>\n</li>\n<li>\n<p>重绘指的是元素发生了外观的一些变化（例如，背景色，边框颜色，文字颜色等），此时只需要重新绘制元素就可以</p>\n</li>\n<li>\n<p>回流成本比重绘成不高，回流的改变往往会导致子元素、兄弟元素的回流</p>\n<h3 id=\"什么会引起回流\"><a href=\"#%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E8%B5%B7%E5%9B%9E%E6%B5%81\" aria-label=\"什么会引起回流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么会引起回流</h3>\n</li>\n<li>\n<p>页面渲染初始化</p>\n</li>\n<li>\n<p>DOM结构发生改变，比如增删DOM节点</p>\n</li>\n<li>\n<p>Render树发生了改变，比如margin、padding等，发生了改变</p>\n</li>\n<li>\n<p>窗口resize</p>\n</li>\n<li>\n<p>获取某些属性，引发回流: 浏览器会对回流进行优化，当回流达到一定数量时才会触发。但是除了render树直接发生改变时浏览器为获取一些属性时，浏览器会直接发生回流，</p>\n<p>1、offset（width、height、top、left）\n2、scroll（width、height、top、left）\n3、client（width、height、top、left）\n4、width、height\n5、调用getComputedStyle()或者IE的currentStyle\n6、改变字体会发生回流</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>回流一定会有重绘，重绘却可以单独出现，为避免开销过大，有以下优化方案:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">* 减少逐项更改样式，最后一次性更改style或则将样式定义为class一次性更新\n* 避免循环操作dom，可以创建一个documentFragment,进行dom操作，最后再添加到window.document\n* 避免多次读取offset等属性，无法避免可以将数据缓存到变量里\n* 使复杂元素脱离文档流，这样回流代价不会很高</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"渲染--绘制-简单层和复合层\"><a href=\"#%E6%B8%B2%E6%9F%93--%E7%BB%98%E5%88%B6-%E7%AE%80%E5%8D%95%E5%B1%82%E5%92%8C%E5%A4%8D%E5%90%88%E5%B1%82\" aria-label=\"渲染  绘制 简单层和复合层 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染--绘制 (简单层和复合层)</h2>\n<p><strong>简单层、复合层补充</strong> <a href=\"https://segmentfault.com/a/1190000012925872#articleHeader16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">链接</a></p>\n<h2 id=\"chrome中的调试\"><a href=\"#chrome%E4%B8%AD%E7%9A%84%E8%B0%83%E8%AF%95\" aria-label=\"chrome中的调试 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chrome中的调试</h2>\n<p><strong>补充</strong></p>\n<h2 id=\"资源外链的下载\"><a href=\"#%E8%B5%84%E6%BA%90%E5%A4%96%E9%93%BE%E7%9A%84%E4%B8%8B%E8%BD%BD\" aria-label=\"资源外链的下载 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资源外链的下载</h2>\n<p>当解析html页面的时候会遇到资源链接:CSS样式资源、JS脚本资源、img图片类资源。</p>\n<h3 id=\"遇到外链时的处理\"><a href=\"#%E9%81%87%E5%88%B0%E5%A4%96%E9%93%BE%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86\" aria-label=\"遇到外链时的处理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遇到外链时的处理</h3>\n<p>当遇外链资源时，会单独开启一个线程去下载资源（http1.1每一个资源下载都要开启一个http请求，对应一个tcp/ip）</p>\n<h3 id=\"遇到css资源\"><a href=\"#%E9%81%87%E5%88%B0css%E8%B5%84%E6%BA%90\" aria-label=\"遇到css资源 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遇到CSS资源</h3>\n<p>CSS资源的处理有几个特点</p>\n<ul>\n<li>\n<p>CSS下载时，是异步下载，不会阻塞浏览器构建DOM树</p>\n</li>\n<li>\n<p>但是会阻塞渲染，也就是构建render树时，等CSS下载解析完毕时再继续进行</p>\n</li>\n<li>\n<p>media query 声明的CSS是不会阻塞渲染的</p>\n<h3 id=\"遇到js脚本资源\"><a href=\"#%E9%81%87%E5%88%B0js%E8%84%9A%E6%9C%AC%E8%B5%84%E6%BA%90\" aria-label=\"遇到js脚本资源 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遇到JS脚本资源</h3>\n<p>JS脚本资源处理的寄个特点</p>\n</li>\n<li>\n<p>浏览器阻塞，当解析html遇到一个外链脚本时，需要等待下载完成并执行后才能继续解析html</p>\n</li>\n<li>\n<p>浏览器优化，当被脚本阻塞时，可以继续下载其它资源（并发有上限）。</p>\n</li>\n<li>\n<p>defer和async属性，可以使脚本变成异步，等解析完后再执行。defer是延迟执行，async是异步执行</p>\n<p>1、async是异步下载后执行，不保证执行顺序，一定在onload事件前，但是不确定在DOMContentLoaded事件的前或后\n2、defer是延迟执行，跟放在body后面一样（规范是在DOMContentLoaded事件前，但是每个浏览器的优化效果不一样，也可能在后面）</p>\n<h3 id=\"遇到img图片类资源\"><a href=\"#%E9%81%87%E5%88%B0img%E5%9B%BE%E7%89%87%E7%B1%BB%E8%B5%84%E6%BA%90\" aria-label=\"遇到img图片类资源 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遇到img图片类资源</h3>\n<p>遇到图片资源时，直接异步下载，不会阻塞html解析，下载完毕直接用图片替换原有src的地方</p>\n<h2 id=\"loaded和domcontentloaded\"><a href=\"#loaded%E5%92%8Cdomcontentloaded\" aria-label=\"loaded和domcontentloaded permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>loaded和domcontentloaded</h2>\n</li>\n<li>\n<p>DOMContentLoaded事件触发时，仅当DOM加载完毕</p>\n</li>\n<li>\n<p>load事件触发时，页面上所有的DOM、样式表、脚本、图片都已经加载完成了</p>\n<h1 id=\"css的可视化格式模型\"><a href=\"#css%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B\" aria-label=\"css的可视化格式模型 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS的可视化格式模型</h1>\n</li>\n<li>\n<p>CSS中规定每个元素都有自己的盒子模型(相当于规定了该元素如何显示)</p>\n</li>\n<li>\n<p>可视化格式模型规定了盒子的布局、摆放、相互作用等\nCSS可视化格式模型规定了浏览器在页面上如何处理文档树。CSS有三种定位机制:普通流、浮动、绝对定位</p>\n<h2 id=\"包含块containing-block\"><a href=\"#%E5%8C%85%E5%90%AB%E5%9D%97containing-block\" aria-label=\"包含块containing block permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>包含块(Containing Block)</h2>\n</li>\n</ul>","excerpt":"原文链接大纲对知识体系进行一次预评级为什么说知识体系如此重要？梳理主干流程从浏览器接收url到开启网络请求线程多进程的浏览器多线程的浏览器内核解析URL网络请求都是单独的线程更多开启网络线程到发出一个完整的http请求DNS查询到ip地址tcp/ip…","fields":{"slug":"/blog/javascript/blog/urlLoader"},"frontmatter":{"id":"https://MuRongJs.github.io/blog/javascript/blog/urlLoader","title":"从输入URL到页面加载的过程(读后感)","slug":"/blog/javascript/blog/urlLoader","date":"2019/3/18 22:34:48","headerImage":""}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"117dca4e-cb17-54c3-831c-78feb62d2d36","index":3}}