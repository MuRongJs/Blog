{"data":{"content":{"edges":[{"node":{"id":"8c6c4a0a-d8f2-5af1-84b7-05c58bdca789","html":"<h1 id=\"原型、原型链\"><a href=\"#%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE\" aria-label=\"原型、原型链 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原型、原型链</h1>\n<p><strong>每个函数都会有prototype属性</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/MuRongJs/learningNotes/master/images/javaScript_prototype_prototypeChain.png\"></p>\n<p>关于实例对象与原型的关系，两者为委托关系，并没有拷贝原型上的属性，只是在两者创建了练习，产生了原型链。</p>\n<h1 id=\"词法作用域和动态作用域\"><a href=\"#%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F\" aria-label=\"词法作用域和动态作用域 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>词法作用域和动态作用域</h1>\n<p>词法作用域是定义函数的时候就决定了。动态作用域是函数在调用的时候决定的。</p>\n<div class=\"gatsby-highlight\" data-language=\"var scope = \"global scope\";\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-var scope = \"global scope\"; line-numbers\"><code class=\"language-var scope = \"global scope\";\">   function checkscope(){\n       var scope = &quot;local scope&quot;;\n       function f(){\n           return scope;\n       }\n       return f();\n   }\n   checkscope();\n   \n   var scope = &quot;global scope&quot;;\n   function checkscope(){\n       var scope = &quot;local scope&quot;;\n       function f(){\n           return scope;\n       }\n       return f;\n   }\n   checkscope()();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>\n</blockquote>\n<h1 id=\"执行上下文栈execution-context-stack\"><a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88execution-context-stack\" aria-label=\"执行上下文栈execution context stack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>执行上下文栈(Execution context stack)</h1>","excerpt":"原型、原型链每个函数都会有prototype属性关于实例对象与原型的关系，两者为委托关系，并没有拷贝原型上的属性，只是在两者创建了练习，产生了原型链。词法作用域和动态作用域词法作用域是定义函数的时候就决定了。动态作用域是函数在调用的时候决定的。JavaScript…","fields":{"slug":"/blog/blog/javascript原型、原型链"},"frontmatter":{"id":"https://MuRongJs.github.io/blog/blog/javascript原型、原型链","title":"javascript原型链","slug":"/blog/blog/javascript原型、原型链","date":"2018/12/26 22:34:48","headerImage":""}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8c6c4a0a-d8f2-5af1-84b7-05c58bdca789","index":7}}